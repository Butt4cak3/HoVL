{"version":3,"sources":["../src/vector.ts","../src/scene.ts","../src/shapes.ts","circles/main.ts"],"names":[],"mappings":";AAAA,MAAM;IAIJ,YAAY,CAAS,EAAE,CAAS;ACJlC,OAAO,CDKH,CCLK,GDKD,CAAC,CAAC,CCLK,EAAE,ADKJ,CAAC,CAAC,kBCLsB;AAgBrC,MAAM,EDVF,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;AELf,IDgCE,AD1BA,CAAC,EENI,EAAE,MAAM,CDgCD,CChCG,KDgCsB,eChCF;AAErC,IFMS,EENH,EDgBM,ADVC,WCUK,GAAY,EAAE,CAAC;AEnBjC,IDOE,GCPK,CFkCH,ADxBA,CGVK,GFkCD,CAAC,CDxBC,AGVI,CHUH,CEHG,ACPE,CDOO,ED2BR,AC3BU,AFGV,CEHmB,ED2BhB,AC3BkB,GFGf,CAAC,CEH2B,CD2BzB,CAAC,CDxBC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CGVH;AACnC,IHUE,CAAC,EGVI,CFkCH,AC3BA,CCPK,GFkCD,AC3BA,CD2BC,AC3BA,ECPM,CDOH,CCPK,EDOF,IAAI,CD2BC,GAAG,EC3BE,CAAC,CD2BC,AC3BA,CD2BC,CC3BC,CAAC,CAAC,CAAC,ED2BE,CAAC,KAAK,CElCH,EFkCM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;AEhC9D,IHYS,GAAG,CCsBR,AC5BA,AFMS,CAAkB,EAAE,CENzB,AFMmC,CENlC,CD4BC,GAAG,CC5BC,ACNK,EFkCH,CC5BC,KD4BK,AC5BA,CD4BC,AC5BA,ACNI,KAAK,KFkCC,CAAC,IAAI,CAAC,CAAC;IC3BtC,ACNA,CDMC,GD4BC,ADtBA,ECsBE,ADtBA,CCsBC,ADtBA,CCsBC,ADtBA,CAAC,ECsBE,CAAC,AElCS,CFkCR,CAAC,IElCgC,GHYzB,MAAM,CAAC,CAAC,CAAC;CEH7B,OCRG,IFkCE,ADtBA,CGZG,CAAC,EFkCA,ADtBA,CCsBC,ADtBA,CAAC,EGZI,CAAC,CHYD,AGZE,CHYD,CCsBC,ADtBA,CAAC,CAAC,CCsBC,GAAG,CAAC;ACxBzB,MAAM,EDyBF,AEjCA,CFiCC,GDtBC,AGXE,CAAC,GHWC,CAAC,CAAC,CEHQ,ACRL,GHWC,AGXE,CHWD,CAAC,CAAC,CAAC,EEHQ,KAAK;IAG/B,IDsBI,ADrBF,CAAC,GCqBK,AEhCJ,CFgCK,CAAC,ECtBE,ACVJ,CDUa,EAAE,CAAS,EAAE,ACVpB,CAAC,CAAC,EAAE,CAAC,CDU6B,CCV3B,CDU6B,ACV5B,EAAE,GDUuC,MCV9B,CAAC;QDWhC,AFAE,ICsBA,ADtBI,AGVJ,CDUG,AFAE,CEAD,AFAE,CEAD,CCVD,CDUG,CDsBD,ACtBE,EAAE,EDsBA,AEhCA,CAAC,CAAC,CDUG,CAAC,ACVF,CFgCC,ACtBE,ACVF,CFgCC,CEhCC,CAAC,EAAE,SAAS,CAAC,GFgCG,CAAC,CAAC;QACrC,ACtBA,CDsBC,AEhCA,CAAC,EDUE,AFAF,CEAG,GFAC,CAAC,CAAC,CEAG,GAAG,AFAF,CAAC,CAAC,IEAM,CAAC;IDuBvB,ACtBA,ACVA,CFgCC,ACtBA,ACVA,OHUG,IAAI,CAAC,CAAC,IAAI,CAAE,CAAC;ICIjB,ACFO,ACVG,IFYC,ACFA,AFDT,CECU,AFDT,CGTa,CAAC,EFYD,CCFQ,CCVK;QFa3B,ACFA,AFDA,AGTA,IAAI,CAAC,CFYC,ACFA,AFDA,CCGC,ADHA,CECC,CAAC,EDEE,ACFA,AFDA,AGTA,CFYC,ACFA,AFDA,AGTA,CAAC,CDUC,ACVA,CAAC,EDUE,CDEC,AEZA,CFYC,AEZA,CAAC,EDUE,CAAC,ACVA,CFYC,AEZA,CFYC,EEZE,IAAI,CAAC,GAAG,CDUC,ACVA,CDUC,GCVG,CDUC,ACVA,CDUC,ECVE,CDUC,ACVA,CDUC,ACVA,CDUC;IDGjD,ADHA,CCGC,ADHA,GECC,ACVA,IAAI,CAAC,CDUC,KCVK,CDUC,ACVA,CAAC,CAAC,CDUC,ACVA,GAAG,CAAC,CDUC,ACVA,CDUC,ECVE,CAAC,GAAG,IAAI,CAAC,EDUE,CAAC,ACVA,CAAC,GDUG,CAAC,ACVA,CAAC,GAAG,CAAC,CDUC,ACVA,CDUC,CAAC;IDIlD,ADDO,AGZP,CAAC,EHYS,CCCC,ACHT,AFES,CAAkB,EAAE,CAAU,ECCxB,ACHT,GAAG,GAAG,KAAK,CAAC,OAAO,CAAC;CCT7B,OFaG,ACFA,AFCA,EAAE,CEDC,AFCA,CEDC,AFCA,CAAC,CCCC,CAAC,IAAI,CAAC,CCFC,EAAE,CAAC,CFCC,CCCC,CAAC,IDDI,CAAC,CCCC,ADDA,CCCC,ADDA;AGV9B,IFYE,CAAC,GCFC,ACVI,CAAC,EDUF,CAAC,AFCF,GEDK,CAAC,AFCF,CEDG,AFCF,CAAC,CEDG,CAAC,EAAE,AFCF,CAAC,CAAC,CAAC,AGXM,CHWL,AGXM,EDUF,EAAE,CAAC,EAAE,IAAI,CAAC,EAAE,GAAG,CAAC,ACVI,CDUH,CAAC,ACVI,GAAG,EAAE;IF0B1C,AEzBP,IDUE,ECVI,CDUD,CAAC,AFCF,IAAI,AGXI,CFyBQ,ADdX,CCcY,ADdX,CGXK,EDUA,CFCD,CCcoB,ADdnB,CEDG,AFCF,CCcoB,ADdnB,CAAC,CGXK,CDUD,ACVE,CDUD,EDe2B,GCftB,CAAC,OCVS,CAAC,QAAQ,CAAsB,CAAC;IACtE,IFyBE,ACfA,AFCA,CAAC,CGXG,CDUD,CDeC,ACfA,CDeC,EEzBI,CDUD,EAAE,ACVE,CFyBD,ACfA,CDeC,EEzBI,GFyBC,GAAG,KAAK,CAAC,AEzBE,CAAC,MAAM,CAAC,CAAC;IDWvC,ACTA,CDSC,GDeC,ADfE,CGTC,CAAC,EFwBA,ADfE,CCeD,ADfE,CAAC,KCeG,CAAC,GExBK,CAAC,EFwBA,CExBG,EFwBA,AExBE,GAAG,CAAC,CAAC,CFwBD,CAAC;CCd/B,GCTC,IFwBE,CExBG,CAAC,EFwBA,ADfF,CCeG,GDfC,CAAC,CAAC,GGTO,CHSH,AGTI,CHSH,AGTI,CFwBD,ADfF,CGTK,CAAC,CFwBD,CExBG,EAAE,CFwBD,AExBE,CFwBD,AExBE,MFwBI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;IAC5D,AEvBA,CFuBC,IEvBI,CAAC,EHQF,GGRO,CHQH,CAAC,AGRI,CHQH,AGRI,IHQA,CAAE,CAAC;AGPnB,CAAC,CAAC,CAAC,CFwBM,IDhBL,CAAC,MCgBe,CAAC,CAAS,EAAE,CAAS,EAAE,KAAa;QACpD,ADhBA,MCgBM,ADhBA,CAAC,ICgBI,ADhBA,CAAC,ECgBE,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;IDf1C,CAAC,GCgBC,MAAM,MAAM,GAAG,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC;IDdnC,ICgBL,ADhBS,CAAC,GCgBN,CAAC,CDhBkB,OCgBV,GAAG;QDfhB,ICgBE,ADhBE,CCgBD,ADhBE,CAAC,IAAI,KAAK,CAAC;QAChB,ICgBE,ADhBE,CCgBD,ADhBE,CAAC,IAAI,KAAK,CAAC;QAChB,ICgBE,CAAC,CDhBG,CCgBD,ADhBE,IAAI,CCgBD,ADhBE;IACd,CAAC,OCgBG,CAAC,EAAE,MAAM;CDfd,WCgBK,KAAK,EAAE,KAAK;SACb,CAAC;IACJ,CAAC;IAIM,aAAa,CAAC,GAAoB;QACvC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YACnB,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;QACnD,CAAC;QAED,EAAE,CAAC,CAAC,GAAG,YAAY,MAAM,CAAC,CAAC,CAAC;YAC1B,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC;YAEtC,MAAM,CAAC;gBACL,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK;gBACtB,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK;aACvB,CAAC;QACJ,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;QACnC,CAAC;IACH,CAAC;IAEM,KAAK;QACV,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;QAChC,IAAI,IAAI,GAAG,KAAK,CAAC;QAEjB,MAAM,KAAK,GAAG,CAAC,GAAW,EAAE,EAAE;YAC5B,MAAM,IAAI,GAAG,GAAG,GAAG,KAAK,CAAC;YACzB,MAAM,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC;YACtB,IAAI,GAAG,GAAG,CAAC;YACX,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YACrB,MAAM,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;QACtC,CAAC,CAAC;QAEF,MAAM,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;IACtC,CAAC;IAEM,KAAK;QACV,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IACxD,CAAC;IAEO,KAAK,CAAC,IAAY,EAAE,EAAU;QACpC,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,IAAI,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC;QACpC,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAIS,MAAM;QACd,IAAI,CAAC,KAAK,EAAE,CAAC;QAEb,GAAG,CAAC,CAAC,MAAM,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAChC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnB,CAAC;IACH,CAAC;CACF","file":"87899fa4155080196a0bd94e6581e8d1.map","sourcesContent":["export class Vector {\n  public x: number;\n  public y: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  public copy(): Vector {\n    return new Vector(this.x, this.y);\n  }\n\n  public add(x: number, y: number): this;\n  public add(vec: Vector): this;\n  public add(x: Vector | number, y?: number) {\n    if (x instanceof Vector) {\n      this.x += x.x;\n      this.y += x.y;\n    } else {\n      this.x += x;\n      this.y += y!;\n    }\n    return this;\n  }\n\n  public sub(x: number, y: number): this;\n  public sub(vec: Vector): this;\n  public sub(x: Vector | number, y?: number) {\n    if (x instanceof Vector) {\n      this.x -= x.x;\n      this.y -= x.y;\n    } else {\n      this.x -= x;\n      this.y -= y!;\n    }\n    return this;\n  }\n\n  public mult(scale: number): this {\n    this.x *= scale;\n    this.y *= scale;\n    return this;\n  }\n}\n","import { Vector } from \"hovl/vector\";\nimport { Shape } from \"hovl/shapes\";\n\nexport interface Viewport {\n  x: number;\n  y: number;\n  w: number;\n  h: number;\n  scale: number;\n}\n\nexport interface Point {\n  x: number;\n  y: number;\n}\n\nexport abstract class Scene {\n  public readonly context: CanvasRenderingContext2D;\n\n  protected shapes: Shape[] = [];\n\n  private readonly canvas: HTMLCanvasElement;\n  private viewport?: Viewport;\n  private aspectRatio: number;\n\n  public get width(): number {\n    return this.canvas.width;\n  }\n\n  public get height(): number {\n    return this.canvas.height;\n  }\n\n  constructor(canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    this.aspectRatio = this.canvas.width / this.canvas.height;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (ctx) {\n      this.context = ctx;\n    } else {\n      throw new Error(\"No canvas found\");\n    }\n  }\n\n  public setCanvasSize(width: number, height: number) {\n    this.canvas.width = width;\n    this.canvas.height = height;\n    this.aspectRatio = this.canvas.width / this.canvas.height;\n  }\n\n  public setViewport(x: number, y: number, width: number) {\n    const scale = this.canvas.width / width;\n    const height = width / this.aspectRatio;\n\n    this.viewport = {\n      x,\n      y,\n      w: width,\n      h: height,\n      scale: scale\n    };\n  }\n\n  public toCanvasSpace(len: number): number;\n  public toCanvasSpace(vec: Vector): Point;\n  public toCanvasSpace(vec: Vector | number) {\n    if (!this.viewport) {\n      throw new Error(\"Please set the viewport first\");\n    }\n\n    if (vec instanceof Vector) {\n      const { x, y, scale } = this.viewport;\n\n      return {\n        x: (vec.x - x) * scale,\n        y: (vec.y - y) * scale\n      };\n    } else {\n      return vec * this.viewport.scale;\n    }\n  }\n\n  public start(): void {\n    const start = performance.now();\n    let last = start;\n\n    const frame = (now: number) => {\n      const time = now - start;\n      const dt = now - last;\n      last = now;\n      this.frame(time, dt);\n      window.requestAnimationFrame(frame);\n    };\n\n    window.requestAnimationFrame(frame);\n  }\n\n  public clear(): void {\n    this.context.clearRect(0, 0, this.width, this.height);\n  }\n\n  private frame(time: number, dt: number): void {\n    this.update(time / 1000, dt / 1000);\n    this.render();\n  }\n\n  protected abstract update(time: number, dt: number): void;\n\n  protected render(): void {\n    this.clear();\n\n    for (const shape of this.shapes) {\n      shape.draw(this);\n    }\n  }\n}\n","import { Scene } from \"hovl/scene\";\nimport { Vector } from \"hovl/vector\";\n\nexport abstract class Shape {\n  public pos: Vector;\n  public color: string;\n\n  constructor(x: number, y: number, color: string) {\n    this.pos = new Vector(x, y);\n    this.color = color;\n  }\n\n  public abstract draw(scene: Scene): void;\n}\n\nexport class Circle extends Shape {\n  public radius: number;\n\n  constructor(x: number, y: number, radius: number, color: string) {\n    super(x, y, color);\n    this.radius = radius;\n  }\n\n  public draw(scene: Scene): void {\n    const { x, y } = scene.toCanvasSpace(this.pos);\n    const radius = scene.toCanvasSpace(this.radius);\n    const ctx = scene.context;\n\n    ctx.beginPath();\n    ctx.arc(x, y, radius, 0, Math.PI * 2);\n    ctx.fillStyle = this.color;\n    ctx.fill();\n  }\n}\n","import { Scene } from \"hovl/scene\";\nimport { Circle } from \"hovl/shapes\";\n\nclass CirclesScene extends Scene {\n  public constructor(canvas: HTMLCanvasElement) {\n    super(canvas);\n\n    this.shapes = [\n      new Circle(2, 2, 1, \"#00FF00\"),\n      new Circle(8, 8, 1, \"#0000FF\")\n    ];\n  }\n\n  protected update(time: number): void {\n    this.shapes[0].pos.x = 5 + Math.sin(time) * 3;\n    this.shapes[1].pos.y = 5 + Math.sin(time) * 3;\n  }\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\n  const scene = new CirclesScene(canvas);\n\n  scene.setCanvasSize(600, 600);\n  scene.setViewport(0, 0, 10);\n\n  scene.start();\n});\n"]}